---
import { TabPage } from '../enums/TabPage';

interface Props {
  activeTab: TabPage
}

const { activeTab } = Astro.props;

---

<script>
  import { TabPage } from "../enums/TabPage"

  let activeTab : string;

  class TabNav extends HTMLElement {
    connectedCallback() {
      activeTab = this.dataset.activeTab as string;

      if (activeTab === TabPage.Content.toString()) {
        this.querySelectorAll('a').forEach((n) => {
          if (n.dataset.toggle === TabPage.Blog.toString())
            n.classList.add('tab-active');
        });
        // content pages function as multipage apps
        return;
      }

      // expand the tab we're on
      this.querySelectorAll('a').forEach((e) => {
        if (e.dataset.toggle as string === activeTab) e.classList.add('tab-active');
      });
      if (activeTab !== TabPage.None.toString()) 
        (document.getElementById(activeTab) as HTMLInputElement).checked = true;
      
      // Hijack navigation and simulate single page app
      this.querySelectorAll('a').forEach((n) => {
        n.addEventListener('click', (e) => {
          if (!(e.target instanceof HTMLAnchorElement)) return;
            e.preventDefault();
            const content = document.getElementById(e.target.dataset.toggle as string) as HTMLInputElement;
            content.parentElement?.classList.remove('collapse-open');
            content.checked = !content.checked;
            this.querySelectorAll('a').forEach((n) => n.classList.remove('tab-active'));
            if (content.checked) e.target.classList.add('tab-active');
        });
      });
    };
  };
  customElements.define('tab-nav', TabNav)
</script>

<tab-nav data-active-tab={activeTab}>
  <div role="tablist" class="tabs tabs-lift">
    <!-- Navigation is hijacked above, but keep href's for SEO -->
    <a href="/about" data-toggle={TabPage.About} role="tab" class="tab">About</a>
    <a href="/blog" data-toggle={TabPage.Blog} role="tab" class="tab">Blog</a> 
  </div>
</tab-nav>